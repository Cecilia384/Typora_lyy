[TOC]



# [NOIP2004 提高组] 合并果子 / [USACO06NOV] Fence Repair G

## 题目描述

在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。

每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过 $n-1$ 次合并之后， 就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。

因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为 $1$ ，并且已知果子的种类 数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。

例如有 $3$ 种果子，数目依次为 $1$ ， $2$ ， $9$ 。可以先将 $1$ 、 $2$ 堆合并，新堆数目为 $3$ ，耗费体力为 $3$ 。接着，将新堆与原先的第三堆合并，又得到新的堆，数目为 $12$ ，耗费体力为 $12$ 。所以多多总共耗费体力 $=3+12=15$ 。可以证明 $15$ 为最小的体力耗费值。

## 输入格式

共两行。  
第一行是一个整数 $n(1\leq n\leq 10000)$ ，表示果子的种类数。  

第二行包含 $n$ 个整数，用空格分隔，第 $i$ 个整数 $a_i(1\leq a_i\leq 20000)$ 是第 $i$ 种果子的数目。

## 输出格式

一个整数，也就是最小的体力耗费值。输入数据保证这个值小于 $2^{31}$ 。

## 样例 #1

### 样例输入 #1

```
3 
1 2 9
```

### 样例输出 #1

```
15
```

## 提示

对于 $30\%$ 的数据，保证有 $n \le 1000$：

对于 $50\%$ 的数据，保证有 $n \le 5000$；

对于全部的数据，保证有 $n \le 10000$。



## KEY

==贪心，二叉树，优先队列==

### 1.贪心AC

~~~c++
#include <iostream>
#include <algorithm>
using namespace std;
 
int a[10000+9];
int n;
int Sum = 0;
 
int main()
{
    cin >> n;
    for (int i = 1; i <= n; i++)cin >> a[i];
    int t = n-1;
 
    int k = 1;//排序的第一个元素标记
/*      sort(a + k, a + n + 1);//从小到大排序    
 *      for (int i = 0; i <= n+1; i++)cout << a[i] << endl;
 */   
    while (t--)
    {  //每合并一次都要排一次序
        sort(a + k, a + n + 1);//从小到大排序      
        //cout << a[k] <<" "<< a[k + 1] << endl;
        Sum += (a[k] + a[k+1]);//合并
        a[k+1] += a[k];
        a[k] = 0;
        k += 1;      
    }
    cout << Sum << endl;
    return 0;
}
~~~



### 2.二叉树

![img](https://img-blog.csdnimg.cn/img_convert/0bfcc2a70e45a423e6ddec411c5f5720.png)

<img src="https://img-blog.csdnimg.cn/img_convert/33337f6fabd8c92a0c1faef36ef8e95c.png" alt="img" style="zoom: 150%;" />

#### AC代码（优先队列

1.

~~~c++
#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;
int main()
{
    int n;
    scanf("%d", &n);
    
    // 使用小根堆, 便于获取最小的两个点
    priority_queue<int, vector<int>, greater<int>> heap;
    
    while(n--)
    {
        int x;
        scanf("%d", &x);
        heap.push(x);
    }
    
    // res存储最终结果
    int res = 0;
    
    while(heap.size()>1)
    {
        // 取最小的两个点合并
        int a = heap.top(); heap.pop();
        int b = heap.top(); heap.pop();
        
        res += a+b;
        
        heap.push(a+b);
    }
    
    printf("%d", res);
    
    return 0;
}

~~~

2.

~~~c++
#include<cstdio>
#include<queue>
#include<vector>
#define maxn 10005
using namespace std;
struct cmp{
       bool operator ()(int x,int y){
            return x>y;
       }
};
priority_queue<int,vector<int>,cmp>q;
int n,cost=0;
int main(){
    scanf("%d",&n);
    for(int i=1;i<=n;i++){
        int x;
        scanf("%d",&x);
        q.push(x);
    }
    while(!q.empty()){
          int a=q.top();q.pop();
          if(q.empty())break;
          int b=q.top();q.pop();
          q.push(a+b);
          cost+=(a+b);
    }
    printf("%d",cost);
    return 0;
}
~~~

