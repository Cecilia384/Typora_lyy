[TOC]



# 最大子段和

## 题目描述

给出一个长度为 $n$ 的序列 $a$，选出其中连续且非空的一段使得这段和最大。

## 输入格式

第一行是一个整数，表示序列的长度 $n$。

第二行有 $n$ 个整数，第 $i$ 个整数表示序列的第 $i$ 个数字 $a_i$。

## 输出格式

输出一行一个整数表示答案。

## 样例 #1

### 样例输入 #1

```
7
2 -4 3 -1 2 -4 3
```

### 样例输出 #1

```
4
```

## 提示

#### 样例 1 解释

选取 $[3, 5]$ 子段 $\{3, -1, 2\}$，其和为 $4$。

#### 数据规模与约定

- 对于 $40\%$ 的数据，保证 $n \leq 2 \times 10^3$。
- 对于 $100\%$ 的数据，保证 $1 \leq n \leq 2 \times 10^5$，$-10^4 \leq a_i \leq 10^4$。



## KEY

==贪心\dp\优先队列==

### 1.贪心

~~~c++
#include<iostream>
using namespace std;

int main()
{
	int n,sum,max,now;	// sum用于记录前缀和，max用于记录最大值，now用于记录当前输入的值
	cin>>n>>sum; 		// 将输入序列的第一个作为sum
	max = sum;			// 将sum的值作为max的值
	while(--n)
	{
		cin>>now;
		sum = sum>0?sum:0; 	// 判断sum的正负以决定是否保留该序列
		sum += now;			// 无论怎样，都加上当前输入的值以对比max
		max=max>sum?max:sum;
	}
	cout<<max<<endl;
	return 0;
}

~~~

(max可以先给一个极小的值)

### 2.dp

该题主要思想是dp法，dp[1]开始， 递推dp[2], dp[2]的取值为dp[1] + a[2], a[2]中最大值，依次类推。

```cpp
dp[i] = max(a[i], dp[i - 1] + a[i]);
```

~~~c++
#include<bits/stdc++.h>
using namespace std;
const int N = 200010;
long long ans, dp[N], a[N], n;
int main() {
  cin >> n;
  for (int i = 1; i <= n; i++)
    scanf("%lld", &a[i]);
  dp[1] = a[1];
  ans = dp[1];
  for (int i = 2; i <= n; i++) {
    dp[i] = max(a[i], dp[i - 1] + a[i]);
    ans = max(ans, dp[i]);
  }
  cout << ans;
  return 0;
}

~~~



